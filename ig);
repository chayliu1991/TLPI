KILL(2)                                                                                                     Linux Programmer's Manual                                                                                                     KILL(2)

NNAAMMEE
       kill - send signal to a process

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt kkiillll((ppiidd__tt _p_i_d,, iinntt _s_i_g));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       kkiillll(): _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The kkiillll() system call can be used to send any signal to any process group or process.

       If _p_i_d is positive, then signal _s_i_g is sent to the process with the ID specified by _p_i_d.

       If _p_i_d equals 0, then _s_i_g is sent to every process in the process group of the calling process.

       If _p_i_d equals -1, then _s_i_g is sent to every process for which the calling process has permission to send signals, except for process 1 (_i_n_i_t), but see below.

       If _p_i_d is less than -1, then _s_i_g is sent to every process in the process group whose ID is _-_p_i_d.

       If _s_i_g is 0, then no signal is sent, but error checking is still performed; this can be used to check for the existence of a process ID or process group ID.

       For a process to have permission to send a signal it must either be privileged (under Linux: have the CCAAPP__KKIILLLL capability), or the real or effective user ID of the sending process must equal the real or saved set-user-ID of the target
       process.  In the case of SSIIGGCCOONNTT it suffices when the sending and receiving processes belong to the same session.  (Historically, the rules were different; see NOTES.)

RREETTUURRNN VVAALLUUEE
       On success (at least one signal was sent), zero is returned.  On error, -1 is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEIINNVVAALL An invalid signal was specified.

       EEPPEERRMM  The process does not have permission to send the signal to any of the target processes.

       EESSRRCCHH  The pid or process group does not exist.  Note that an existing process might be a zombie, a process which already committed termination, but has not yet been wwaaiitt(2)ed for.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.

NNOOTTEESS
       The only signals that can be sent to process ID 1, the _i_n_i_t process, are those for which _i_n_i_t has explicitly installed signal handlers.  This is done to assure the system is not brought down accidentally.

       POSIX.1 requires that _k_i_l_l_(_-_1_,_s_i_g_) send _s_i_g to all processes that the calling process may send signals to, except possibly for some implementation-defined system processes.  Linux allows a process to signal itself, but  on  Linux  the
       call _k_i_l_l_(_-_1_,_s_i_g_) does not signal the calling process.

       POSIX.1  requires  that  if  a  process  sends a signal to itself, and the sending thread does not have the signal blocked, and no other thread has it unblocked or is waiting for it in ssiiggwwaaiitt(3), at least one unblocked signal must be
       delivered to the sending thread before the kkiillll() returns.

   LLiinnuuxx nnootteess
       Across different kernel versions, Linux has enforced different rules for the permissions required for an unprivileged process to send a signal to another process.  In kernels 1.0 to 1.2.2, a signal could be sent if the effective  user
       ID of the sender matched effective user ID of the target, or the real user ID of the sender matched the real user ID of the target.  From kernel 1.2.3 until 1.3.77, a signal could be sent if the effective user ID of the sender matched
       either the real or effective user ID of the target.  The current rules, which conform to POSIX.1, were adopted in kernel 1.3.78.

BBUUGGSS
       In 2.6 kernels up to and including 2.6.7, there was a bug that meant that when sending signals to a process group, kkiillll() failed with the error EEPPEERRMM if the caller did not have permission to send the signal to _a_n_y (rather than _a_l_l) of
       the members of the process group.  Notwithstanding this error return, the signal was still delivered to all of the processes for which the caller had permission to signal.

SSEEEE AALLSSOO
       __eexxiitt(2), kkiillllppgg(2), ssiiggnnaall(2), ttkkiillll(2), eexxiitt(3), ssiiggqquueeuuee(3), ccaappaabbiilliittiieess(7), ccrreeddeennttiiaallss(7), ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

Linux                                                                                                               2015-08-08                                                                                                            KILL(2)
