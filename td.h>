PREAD(2)                                                                                                           Linux Programmer's Manual                                                                                                           PREAD(2)

NNAAMMEE
       pread, pwrite - read from or write to a file descriptor at a given offset

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>

       ssssiizzee__tt pprreeaadd((iinntt _f_d,, vvooiidd **_b_u_f,, ssiizzee__tt _c_o_u_n_t,, ooffff__tt _o_f_f_s_e_t));;

       ssssiizzee__tt ppwwrriittee((iinntt _f_d,, ccoonnsstt vvooiidd **_b_u_f,, ssiizzee__tt _c_o_u_n_t,, ooffff__tt _o_f_f_s_e_t));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       pprreeaadd(), ppwwrriittee():
           _XOPEN_SOURCE >= 500
           || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L

DDEESSCCRRIIPPTTIIOONN
       pprreeaadd() reads up to _c_o_u_n_t bytes from file descriptor _f_d at offset _o_f_f_s_e_t (from the start of the file) into the buffer starting at _b_u_f.  The file offset is not changed.

       ppwwrriittee() writes up to _c_o_u_n_t bytes from the buffer starting at _b_u_f to the file descriptor _f_d at offset _o_f_f_s_e_t.  The file offset is not changed.

       The file referenced by _f_d must be capable of seeking.

RREETTUURRNN VVAALLUUEE
       On success, pprreeaadd() returns the number of bytes read (a return of zero indicates end of file) and ppwwrriittee() returns the number of bytes written.

       Note that is not an error for a successful call to transfer fewer bytes than requested (see rreeaadd(2) and wwrriittee(2)).

       On error, -1 is returned and _e_r_r_n_o is set to indicate the cause of the error.

EERRRROORRSS
       pprreeaadd() can fail and set _e_r_r_n_o to any error specified for rreeaadd(2) or llsseeeekk(2).  ppwwrriittee() can fail and set _e_r_r_n_o to any error specified for wwrriittee(2) or llsseeeekk(2).

VVEERRSSIIOONNSS
       The pprreeaadd() and ppwwrriittee() system calls were added to Linux in version 2.1.60; the entries in the i386 system call table were added in 2.1.69.  C library support (including emulation using llsseeeekk(2) on older kernels without the system calls) was added
       in glibc 2.1.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008.

NNOOTTEESS
       The pprreeaadd() and ppwwrriittee() system calls are especially useful in multithreaded applications.  They allow multiple threads to perform I/O on the same file descriptor without being affected by changes to the file offset by other threads.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       On Linux, the underlying system calls were renamed in kernel 2.6: pprreeaadd() became pprreeaadd6644(), and ppwwrriittee() became ppwwrriittee6644().  The system call numbers remained the same.  The glibc pprreeaadd() and ppwwrriittee() wrapper functions transparently  deal  with  the
       change.

       On some 32-bit architectures, the calling signature for these system calls differ, for the reasons described in ssyyssccaallll(2).

BBUUGGSS
       POSIX  requires  that  opening a file with the OO__AAPPPPEENNDD flag should have no effect on the location at which ppwwrriittee() writes data.  However, on Linux, if a file is opened with OO__AAPPPPEENNDD, ppwwrriittee() appends data to the end of the file, regardless of the
       value of _o_f_f_s_e_t.

SSEEEE AALLSSOO
       llsseeeekk(2), rreeaadd(2), rreeaaddvv(2), wwrriittee(2)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

Linux                                                                                                                      2015-07-23                                                                                                                  PREAD(2)
