SIGPROCMASK(2)                                                                               Linux Programmer's Manual                                                                               SIGPROCMASK(2)

NNAAMMEE
       sigprocmask, rt_sigprocmask - examine and change blocked signals

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt ssiiggpprrooccmmaasskk((iinntt _h_o_w,, ccoonnsstt ssiiggsseett__tt **_s_e_t,, ssiiggsseett__tt **_o_l_d_s_e_t));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssiiggpprrooccmmaasskk(): _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE

DDEESSCCRRIIPPTTIIOONN
       ssiiggpprrooccmmaasskk()  is  used to fetch and/or change the signal mask of the calling thread.  The signal mask is the set of signals whose delivery is currently blocked for the caller (see also ssiiggnnaall(7) for more
       details).

       The behavior of the call is dependent on the value of _h_o_w, as follows.

       SSIIGG__BBLLOOCCKK
              The set of blocked signals is the union of the current set and the _s_e_t argument.

       SSIIGG__UUNNBBLLOOCCKK
              The signals in _s_e_t are removed from the current set of blocked signals.  It is permissible to attempt to unblock a signal which is not blocked.

       SSIIGG__SSEETTMMAASSKK
              The set of blocked signals is set to the argument _s_e_t.

       If _o_l_d_s_e_t is non-NULL, the previous value of the signal mask is stored in _o_l_d_s_e_t.

       If _s_e_t is NULL, then the signal mask is unchanged (i.e., _h_o_w is ignored), but the current value of the signal mask is nevertheless returned in _o_l_d_s_e_t (if it is not NULL).

       The use of ssiiggpprrooccmmaasskk() is unspecified in a multithreaded process; see pptthhrreeaadd__ssiiggmmaasskk(3).

RREETTUURRNN VVAALLUUEE
       ssiiggpprrooccmmaasskk() returns 0 on success and -1 on error.  In the event of an error, _e_r_r_n_o is set to indicate the cause.

EERRRROORRSS
       EEFFAAUULLTT The _s_e_t or _o_l_d_s_e_t argument points outside the process's allocated address space.

       EEIINNVVAALL The value specified in _h_o_w was invalid.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008.

NNOOTTEESS
       It is not possible to block SSIIGGKKIILLLL or SSIIGGSSTTOOPP.  Attempts to do so are silently ignored.

       Each of the threads in a process has its own signal mask.

       A child created via ffoorrkk(2) inherits a copy of its parent's signal mask; the signal mask is preserved across eexxeeccvvee(2).

       If SSIIGGBBUUSS, SSIIGGFFPPEE, SSIIGGIILLLL, or SSIIGGSSEEGGVV are generated while they are blocked, the result is undefined, unless the signal was generated by kkiillll(2), ssiiggqquueeuuee(3), or rraaiissee(3).

       See ssiiggsseettooppss(3) for details on manipulating signal sets.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The glibc wrapper function for ssiiggpprrooccmmaasskk() silently ignores attempts to block the two real-time signals that are used internally by the NPTL threading implementation.  See nnppttll(7) for details.

       The original Linux system call was named ssiiggpprrooccmmaasskk().  However, with the addition of real-time signals in Linux 2.2, the fixed-size, 32-bit _s_i_g_s_e_t___t type supported by that system call was no longer  fit
       for  purpose.   Consequently, a new system call, rrtt__ssiiggpprrooccmmaasskk(), was added to support an enlarged _s_i_g_s_e_t___t type.  The new system call takes a fourth argument, _s_i_z_e___t _s_i_g_s_e_t_s_i_z_e, which specifies the size
       in bytes of the signal sets in _s_e_t and _o_l_d_s_e_t.  This argument is currently required to have the value _s_i_z_e_o_f_(_s_i_g_s_e_t___t_) (or the error EEIINNVVAALL results).  The glibc ssiiggpprrooccmmaasskk() wrapper function hides  these
       details from us, transparently calling rrtt__ssiiggpprrooccmmaasskk() when the kernel provides it.

SSEEEE AALLSSOO
       kkiillll(2), ppaauussee(2), ssiiggaaccttiioonn(2), ssiiggnnaall(2), ssiiggppeennddiinngg(2), ssiiggssuussppeenndd(2), pptthhrreeaadd__ssiiggmmaasskk(3), ssiiggqquueeuuee(3), ssiiggsseettooppss(3), ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This  page  is  part  of  release  4.04  of  the  Linux  _m_a_n_-_p_a_g_e_s  project.   A  description  of  the  project,  information  about  reporting  bugs,  and the latest version of this page, can be found at
       http://www.kernel.org/doc/man-pages/.

Linux                                                                                                2015-07-23                                                                                      SIGPROCMASK(2)
SIGACTION(2)                                                                                                Linux Programmer's Manual                                                                                                SIGACTION(2)

NNAAMMEE
       sigaction, rt_sigaction - examine and change a signal action

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt ssiiggaaccttiioonn((iinntt _s_i_g_n_u_m,, ccoonnsstt ssttrruucctt ssiiggaaccttiioonn **_a_c_t,,
                     ssttrruucctt ssiiggaaccttiioonn **_o_l_d_a_c_t));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssiiggaaccttiioonn(): _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE

       _s_i_g_i_n_f_o___t: _POSIX_C_SOURCE >= 199309L

DDEESSCCRRIIPPTTIIOONN
       The ssiiggaaccttiioonn() system call is used to change the action taken by a process on receipt of a specific signal.  (See ssiiggnnaall(7) for an overview of signals.)

       _s_i_g_n_u_m specifies the signal and can be any valid signal except SSIIGGKKIILLLL and SSIIGGSSTTOOPP.

       If _a_c_t is non-NULL, the new action for signal _s_i_g_n_u_m is installed from _a_c_t.  If _o_l_d_a_c_t is non-NULL, the previous action is saved in _o_l_d_a_c_t.

       The _s_i_g_a_c_t_i_o_n structure is defined as something like:

           struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };

       On some architectures a union is involved: do not assign to both _s_a___h_a_n_d_l_e_r and _s_a___s_i_g_a_c_t_i_o_n.

       The _s_a___r_e_s_t_o_r_e_r field is not intended for application use.  (POSIX does not specify a _s_a___r_e_s_t_o_r_e_r field.)  Some further details of purpose of this field can be found in ssiiggrreettuurrnn(2).

       _s_a___h_a_n_d_l_e_r  specifies  the action to be associated with _s_i_g_n_u_m and may be SSIIGG__DDFFLL for the default action, SSIIGG__IIGGNN to ignore this signal, or a pointer to a signal handling function.  This function receives the signal number as its only
       argument.

       If SSAA__SSIIGGIINNFFOO is specified in _s_a___f_l_a_g_s, then _s_a___s_i_g_a_c_t_i_o_n (instead of _s_a___h_a_n_d_l_e_r) specifies the signal-handling function for _s_i_g_n_u_m.  This function receives the signal number as its first argument, a pointer to a _s_i_g_i_n_f_o___t as its sec‐
       ond argument and a pointer to a _u_c_o_n_t_e_x_t___t (cast to _v_o_i_d _*) as its third argument.  (Commonly, the handler function doesn't make any use of the third argument.  See ggeettccoonntteexxtt(3) for further information about _u_c_o_n_t_e_x_t___t.)

       _s_a___m_a_s_k  specifies  a  mask  of signals which should be blocked (i.e., added to the signal mask of the thread in which the signal handler is invoked) during execution of the signal handler.  In addition, the signal which triggered the
       handler will be blocked, unless the SSAA__NNOODDEEFFEERR flag is used.

       _s_a___f_l_a_g_s specifies a set of flags which modify the behavior of the signal.  It is formed by the bitwise OR of zero or more of the following:

           SSAA__NNOOCCLLDDSSTTOOPP
                  If _s_i_g_n_u_m is SSIIGGCCHHLLDD, do not receive notification when child processes stop (i.e., when they receive one of SSIIGGSSTTOOPP, SSIIGGTTSSTTPP, SSIIGGTTTTIINN, or SSIIGGTTTTOOUU) or resume (i.e., they receive SSIIGGCCOONNTT) (see wwaaiitt(2)).  This flag is meaning‐
                  ful only when establishing a handler for SSIIGGCCHHLLDD.

           SSAA__NNOOCCLLDDWWAAIITT (since Linux 2.6)
                  If  _s_i_g_n_u_m  is  SSIIGGCCHHLLDD,  do not transform children into zombies when they terminate.  See also wwaaiittppiidd(2).  This flag is meaningful only when establishing a handler for SSIIGGCCHHLLDD, or when setting that signal's disposition to
                  SSIIGG__DDFFLL.

                  If the SSAA__NNOOCCLLDDWWAAIITT flag is set when establishing a handler for SSIIGGCCHHLLDD, POSIX.1 leaves it unspecified whether a SSIIGGCCHHLLDD signal is generated when a child process terminates.  On Linux, a SSIIGGCCHHLLDD signal is generated in  this
                  case; on some other implementations, it is not.

           SSAA__NNOODDEEFFEERR
                  Do not prevent the signal from being received from within its own signal handler.  This flag is meaningful only when establishing a signal handler.  SSAA__NNOOMMAASSKK is an obsolete, nonstandard synonym for this flag.

           SSAA__OONNSSTTAACCKK
                  Call the signal handler on an alternate signal stack provided by ssiiggaallttssttaacckk(2).  If an alternate stack is not available, the default stack will be used.  This flag is meaningful only when establishing a signal handler.

           SSAA__RREESSEETTHHAANNDD
                  Restore the signal action to the default upon entry to the signal handler.  This flag is meaningful only when establishing a signal handler.  SSAA__OONNEESSHHOOTT is an obsolete, nonstandard synonym for this flag.

           SSAA__RREESSTTAARRTT
                  Provide  behavior  compatible  with BSD signal semantics by making certain system calls restartable across signals.  This flag is meaningful only when establishing a signal handler.  See ssiiggnnaall(7) for a discussion of system
                  call restarting.

           SSAA__RREESSTTOORREERR
                  _N_o_t _i_n_t_e_n_d_e_d _f_o_r _a_p_p_l_i_c_a_t_i_o_n _u_s_e.  This flag is used by C libraries to indicate that the _s_a___r_e_s_t_o_r_e_r field contains the address of a "signal trampoline".  See ssiiggrreettuurrnn(2) for more details.

           SSAA__SSIIGGIINNFFOO (since Linux 2.2)
                  The signal handler takes three arguments, not one.  In this case, _s_a___s_i_g_a_c_t_i_o_n should be set instead of _s_a___h_a_n_d_l_e_r.  This flag is meaningful only when establishing a signal handler.

       The _s_i_g_i_n_f_o___t argument to _s_a___s_i_g_a_c_t_i_o_n is a struct with the following fields:

           siginfo_t {
               int      si_signo;     /* Signal number */
               int      si_errno;     /* An errno value */
               int      si_code;      /* Signal code */
               int      si_trapno;    /* Trap number that caused
                                         hardware-generated signal
                                         (unused on most architectures) */
               pid_t    si_pid;       /* Sending process ID */
               uid_t    si_uid;       /* Real user ID of sending process */
               int      si_status;    /* Exit value or signal */
               clock_t  si_utime;     /* User time consumed */
               clock_t  si_stime;     /* System time consumed */
               sigval_t si_value;     /* Signal value */
               int      si_int;       /* POSIX.1b signal */
               void    *si_ptr;       /* POSIX.1b signal */
               int      si_overrun;   /* Timer overrun count;
                                         POSIX.1b timers */
               int      si_timerid;   /* Timer ID; POSIX.1b timers */
               void    *si_addr;      /* Memory location which caused fault */
               long     si_band;      /* Band event (was _i_n_t in
                                         glibc 2.3.2 and earlier) */
               int      si_fd;        /* File descriptor */
               short    si_addr_lsb;  /* Least significant bit of address
                                         (since Linux 2.6.32) */
               void    *si_call_addr; /* Address of system call instruction
                                         (since Linux 3.5) */
               int      si_syscall;   /* Number of attempted system call
                                         (since Linux 3.5) */
               unsigned int si_arch;  /* Architecture of attempted system call
                                         (since Linux 3.5) */
           }

       _s_i___s_i_g_n_o, _s_i___e_r_r_n_o and _s_i___c_o_d_e are defined for all signals.  (_s_i___e_r_r_n_o is generally unused on Linux.)  The rest of the struct may be a union, so that one should read only the fields that are meaningful for the given signal:

       * Signals sent with kkiillll(2) and ssiiggqquueeuuee(3) fill in _s_i___p_i_d and _s_i___u_i_d.  In addition, signals sent with ssiiggqquueeuuee(3) fill in _s_i___i_n_t and _s_i___p_t_r with the values specified by the sender of the signal; see ssiiggqquueeuuee(3) for more details.

       * Signals sent by POSIX.1b timers (since Linux 2.6) fill in _s_i___o_v_e_r_r_u_n and _s_i___t_i_m_e_r_i_d.  The _s_i___t_i_m_e_r_i_d field is an internal ID used by the kernel to identify the timer; it is not the same as the timer ID returned  by  ttiimmeerr__ccrreeaattee(2).
         The _s_i___o_v_e_r_r_u_n field is the timer overrun count; this is the same information as is obtained by a call to ttiimmeerr__ggeettoovveerrrruunn(2).  These fields are nonstandard Linux extensions.

       * Signals  sent  for message queue notification (see the description of SSIIGGEEVV__SSIIGGNNAALL in mmqq__nnoottiiffyy(3)) fill in _s_i___i_n_t/_s_i___p_t_r, with the _s_i_g_e_v___v_a_l_u_e supplied to mmqq__nnoottiiffyy(3); _s_i___p_i_d, with the process ID of the message sender; and _s_i___u_i_d,
         with the real user ID of the message sender.

       * SSIIGGCCHHLLDD fills in _s_i___p_i_d, _s_i___u_i_d, _s_i___s_t_a_t_u_s, _s_i___u_t_i_m_e, and _s_i___s_t_i_m_e, providing information about the child.  The _s_i___p_i_d field is the process ID of the child; _s_i___u_i_d is the child's real user ID.  The _s_i___s_t_a_t_u_s field contains the  exit
         status of the child (if _s_i___c_o_d_e is CCLLDD__EEXXIITTEEDD), or the signal number that caused the process to change state.  The _s_i___u_t_i_m_e and _s_i___s_t_i_m_e contain the user and system CPU time used by the child process; these fields do not include the
         times used by waited-for children (unlike ggeettrruussaaggee(2) and ttiimmeess(2)).  In kernels up to 2.6, and since 2.6.27, these fields report CPU time in units of _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_).  In 2.6 kernels before 2.6.27,  a  bug  meant  that  these
         fields reported time in units of the (configurable) system jiffy (see ttiimmee(7)).

       * SSIIGGIILLLL,  SSIIGGFFPPEE,  SSIIGGSSEEGGVV,  SSIIGGBBUUSS,  and  SSIIGGTTRRAAPP  fill  in  _s_i___a_d_d_r  with  the address of the fault.  On some architectures, these signals also fill in the _s_i___t_r_a_p_n_o field.  Some suberrors of SSIIGGBBUUSS, in particular BBUUSS__MMCCEEEERRRR__AAOO and
         BBUUSS__MMCCEEEERRRR__AARR, also fill in _s_i___a_d_d_r___l_s_b.  This field indicates the least significant bit of the reported address and therefore the extent of the  corruption.   For  example,  if  a  full  page  was  corrupted,  _s_i___a_d_d_r___l_s_b  contains
         _l_o_g_2_(_s_y_s_c_o_n_f_(___S_C___P_A_G_E_S_I_Z_E_)_).   When  SSIIGGTTRRAAPP  is delivered in response to a ppttrraaccee(2) event (PTRACE_EVENT_foo), _s_i___a_d_d_r is not populated, but _s_i___p_i_d and _s_i___u_i_d are populated with the respective process ID and user ID responsible for
         delivering the trap.  In the case of sseeccccoommpp(2), the tracee will be shown as delivering the event.  BBUUSS__MMCCEEEERRRR__** and _s_i___a_d_d_r___l_s_b are Linux-specific extensions.

       * SSIIGGIIOO/SSIIGGPPOOLLLL (the two names are synonyms on Linux) fills in _s_i___b_a_n_d and _s_i___f_d.  The _s_i___b_a_n_d event is a bit mask containing the same values as are filled in the _r_e_v_e_n_t_s field by ppoollll(2).  The _s_i___f_d field indicates the file  descrip‐
         tor for which the I/O event occurred; for further details, see the description of FF__SSEETTSSIIGG in ffccnnttll(2).

       * SSIIGGSSYYSS, generated (since Linux 3.5) when a seccomp filter returns SSEECCCCOOMMPP__RREETT__TTRRAAPP, fills in _s_i___c_a_l_l___a_d_d_r, _s_i___s_y_s_c_a_l_l, _s_i___a_r_c_h, _s_i___e_r_r_n_o, and other fields as described in sseeccccoommpp(2).

       _s_i___c_o_d_e is a value (not a bit mask) indicating why this signal was sent.  For a ppttrraaccee(2) event, _s_i___c_o_d_e will contain SSIIGGTTRRAAPP and have the ptrace event in the high byte:

           (SIGTRAP | PTRACE_EVENT_foo << 8).

       For a regular signal, the following list shows the values which can be placed in _s_i___c_o_d_e for any signal, along with reason that the signal was generated.

           SSII__UUSSEERR
                  kkiillll(2).

           SSII__KKEERRNNEELL
                  Sent by the kernel.

           SSII__QQUUEEUUEE
                  ssiiggqquueeuuee(3).

           SSII__TTIIMMEERR
                  POSIX timer expired.

           SSII__MMEESSGGQQ (since Linux 2.6.6)
                  POSIX message queue state changed; see mmqq__nnoottiiffyy(3).

           SSII__AASSYYNNCCIIOO
                  AIO completed.

           SSII__SSIIGGIIOO
                  Queued SSIIGGIIOO (only in kernels up to Linux 2.2; from Linux 2.4 onward SSIIGGIIOO/SSIIGGPPOOLLLL fills in _s_i___c_o_d_e as described below).

           SSII__TTKKIILLLL (since Linux 2.4.19)
                  ttkkiillll(2) or ttggkkiillll(2).

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGIILLLL signal:

           IILLLL__IILLLLOOPPCC
                  Illegal opcode.

           IILLLL__IILLLLOOPPNN
                  Illegal operand.

           IILLLL__IILLLLAADDRR
                  Illegal addressing mode.

           IILLLL__IILLLLTTRRPP
                  Illegal trap.

           IILLLL__PPRRVVOOPPCC
                  Privileged opcode.

           IILLLL__PPRRVVRREEGG
                  Privileged register.

           IILLLL__CCOOPPRROOCC
                  Coprocessor error.

           IILLLL__BBAADDSSTTKK
                  Internal stack error.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGFFPPEE signal:

           FFPPEE__IINNTTDDIIVV
                  Integer divide by zero.

           FFPPEE__IINNTTOOVVFF
                  Integer overflow.

           FFPPEE__FFLLTTDDIIVV
                  Floating-point divide by zero.

           FFPPEE__FFLLTTOOVVFF
                  Floating-point overflow.

           FFPPEE__FFLLTTUUNNDD
                  Floating-point underflow.

           FFPPEE__FFLLTTRREESS
                  Floating-point inexact result.

           FFPPEE__FFLLTTIINNVV
                  Floating-point invalid operation.

           FFPPEE__FFLLTTSSUUBB
                  Subscript out of range.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGSSEEGGVV signal:

           SSEEGGVV__MMAAPPEERRRR
                  Address not mapped to object.

           SSEEGGVV__AACCCCEERRRR
                  Invalid permissions for mapped object.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGBBUUSS signal:

           BBUUSS__AADDRRAALLNN
                  Invalid address alignment.

           BBUUSS__AADDRREERRRR
                  Nonexistent physical address.

           BBUUSS__OOBBJJEERRRR
                  Object-specific hardware error.

           BBUUSS__MMCCEEEERRRR__AARR (since Linux 2.6.32)
                  Hardware memory error consumed on a machine check; action required.

           BBUUSS__MMCCEEEERRRR__AAOO (since Linux 2.6.32)
                  Hardware memory error detected in process but not consumed; action optional.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGTTRRAAPP signal:

           TTRRAAPP__BBRRKKPPTT
                  Process breakpoint.

           TTRRAAPP__TTRRAACCEE
                  Process trace trap.

           TTRRAAPP__BBRRAANNCCHH (since Linux 2.4)
                  Process taken branch trap.

           TTRRAAPP__HHWWBBKKPPTT (since Linux 2.4)
                  Hardware breakpoint/watchpoint.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGCCHHLLDD signal:

           CCLLDD__EEXXIITTEEDD
                  Child has exited.

           CCLLDD__KKIILLLLEEDD
                  Child was killed.

           CCLLDD__DDUUMMPPEEDD
                  Child terminated abnormally.

           CCLLDD__TTRRAAPPPPEEDD
                  Traced child has trapped.

           CCLLDD__SSTTOOPPPPEEDD
                  Child has stopped.

           CCLLDD__CCOONNTTIINNUUEEDD (since Linux 2.6.9)
                  Stopped child has continued.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGIIOO/SSIIGGPPOOLLLL signal:

           PPOOLLLL__IINN
                  Data input available.

           PPOOLLLL__OOUUTT
                  Output buffers available.

           PPOOLLLL__MMSSGG
                  Input message available.

           PPOOLLLL__EERRRR
                  I/O error.

           PPOOLLLL__PPRRII
                  High priority input available.

           PPOOLLLL__HHUUPP
                  Device disconnected.

       The following value can be placed in _s_i___c_o_d_e for a SSIIGGSSYYSS signal:

           SSYYSS__SSEECCCCOOMMPP (since Linux 3.5)
                  Triggered by a sseeccccoommpp(2) filter rule.

RREETTUURRNN VVAALLUUEE
       ssiiggaaccttiioonn() returns 0 on success; on error, -1 is returned, and _e_r_r_n_o is set to indicate the error.

EERRRROORRSS
       EEFFAAUULLTT _a_c_t or _o_l_d_a_c_t points to memory which is not a valid part of the process address space.

       EEIINNVVAALL An invalid signal was specified.  This will also be generated if an attempt is made to change the action for SSIIGGKKIILLLL or SSIIGGSSTTOOPP, which cannot be caught or ignored.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4.

NNOOTTEESS
       A child created via ffoorrkk(2) inherits a copy of its parent's signal dispositions.  During an eexxeeccvvee(2), the dispositions of handled signals are reset to the default; the dispositions of ignored signals are left unchanged.

       According  to  POSIX, the behavior of a process is undefined after it ignores a SSIIGGFFPPEE, SSIIGGIILLLL, or SSIIGGSSEEGGVV signal that was not generated by kkiillll(2) or rraaiissee(3).  Integer division by zero has undefined result.  On some architectures it
       will generate a SSIIGGFFPPEE signal.  (Also dividing the most negative integer by -1 may generate SSIIGGFFPPEE.)  Ignoring this signal might lead to an endless loop.

       POSIX.1-1990 disallowed setting the action for SSIIGGCCHHLLDD to SSIIGG__IIGGNN.  POSIX.1-2001 and later allow this possibility, so that ignoring SSIIGGCCHHLLDD can be used to prevent the creation of zombies (see wwaaiitt(2)).   Nevertheless,  the  historical
       BSD and System V behaviors for ignoring SSIIGGCCHHLLDD differ, so that the only completely portable method of ensuring that terminated children do not become zombies is to catch the SSIIGGCCHHLLDD signal and perform a wwaaiitt(2) or similar.

       POSIX.1-1990  specified  only SSAA__NNOOCCLLDDSSTTOOPP.  POSIX.1-2001 added SSAA__NNOOCCLLDDSSTTOOPP, SSAA__NNOOCCLLDDWWAAIITT, SSAA__NNOODDEEFFEERR, SSAA__OONNSSTTAACCKK, SSAA__RREESSEETTHHAANNDD, SSAA__RREESSTTAARRTT, and SSAA__SSIIGGIINNFFOO.  Use of these latter values in _s_a___f_l_a_g_s may be less portable in applications
       intended for older UNIX implementations.

       The SSAA__RREESSEETTHHAANNDD flag is compatible with the SVr4 flag of the same name.

       The SSAA__NNOODDEEFFEERR flag is compatible with the SVr4 flag of the same name under kernels 1.3.9 and newer.  On older kernels the Linux implementation allowed the receipt of any signal, not just the one we are installing  (effectively  over‐
       riding any _s_a___m_a_s_k settings).

       ssiiggaaccttiioonn() can be called with a NULL second argument to query the current signal handler.  It can also be used to check whether a given signal is valid for the current machine by calling it with NULL second and third arguments.

       It is not possible to block SSIIGGKKIILLLL or SSIIGGSSTTOOPP (by specifying them in _s_a___m_a_s_k).  Attempts to do so are silently ignored.

       See ssiiggsseettooppss(3) for details on manipulating signal sets.

       See ssiiggnnaall(7) for a list of the async-signal-safe functions that can be safely called inside from inside a signal handler.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The glibc wrapper function for ssiiggaaccttiioonn() gives an error (EEIINNVVAALL) on attempts to change the disposition of the two real-time signals used internally by the NPTL threading implementation.  See nnppttll(7) for details.

       The  original  Linux  system call was named ssiiggaaccttiioonn().  However, with the addition of real-time signals in Linux 2.2, the fixed-size, 32-bit _s_i_g_s_e_t___t type supported by that system call was no longer fit for purpose.  Consequently, a
       new system call, rrtt__ssiiggaaccttiioonn(), was added to support an enlarged _s_i_g_s_e_t___t type.  The new system call takes a fourth argument, _s_i_z_e___t _s_i_g_s_e_t_s_i_z_e, which specifies the size in bytes of the signal sets in _a_c_t_._s_a___m_a_s_k and  _o_l_d_a_c_t_._s_a___m_a_s_k.
       This  argument  is currently required to have the value _s_i_z_e_o_f_(_s_i_g_s_e_t___t_) (or the error EEIINNVVAALL results).  The glibc ssiiggaaccttiioonn() wrapper function hides these details from us, transparently calling rrtt__ssiiggaaccttiioonn() when the kernel provides
       it.

   UUnnddooccuummeenntteedd
       Before the introduction of SSAA__SSIIGGIINNFFOO, it was also possible to get some additional information, namely by using a _s_a___h_a_n_d_l_e_r with second argument of type _s_t_r_u_c_t _s_i_g_c_o_n_t_e_x_t.  See the relevant Linux kernel sources for details.  This use
       is obsolete now.

BBUUGGSS
       In  kernels up to and including 2.6.13, specifying SSAA__NNOODDEEFFEERR in _s_a___f_l_a_g_s prevents not only the delivered signal from being masked during execution of the handler, but also the signals specified in _s_a___m_a_s_k.  This bug was fixed in ker‐
       nel 2.6.14.

EEXXAAMMPPLLEE
       See mmpprrootteecctt(2).

SSEEEE AALLSSOO
       kkiillll(1), kkiillll(2), kkiillllppgg(2), ppaauussee(2), rreessttaarrtt__ssyyssccaallll(2), sseeccccoommpp(2) ssiiggaallttssttaacckk(2), ssiiggnnaall(2), ssiiggnnaallffdd(2), ssiiggppeennddiinngg(2), ssiiggrreettuurrnn(2), ssiiggpprrooccmmaasskk(2), ssiiggssuussppeenndd(2), wwaaiitt(2), rraaiissee(3), ssiiggiinntteerrrruupptt(3),  ssiiggqquueeuuee(3),  ssiiggsseettooppss(3),
       ssiiggvveecc(3), ccoorree(5), ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

Linux                                                                                                               2015-08-08                                                                                                       SIGACTION(2)
SIGALTSTACK(2)             Linux Programmer's Manual            SIGALTSTACK(2)

NNAAMMEE
       sigaltstack - set and/or get signal stack context

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt ssiiggaallttssttaacckk((ccoonnsstt ssttaacckk__tt **_s_s,, ssttaacckk__tt **_o_s_s));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssiiggaallttssttaacckk():
           _BSD_SOURCE || _XOPEN_SOURCE >= 500 ||
           _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
           || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L

DDEESSCCRRIIPPTTIIOONN
       ssiiggaallttssttaacckk() allows a process to define a new alternate  signal  stack
       and/or  retrieve  the  state of an existing alternate signal stack.  An
       alternate signal stack is used during the execution of a signal handler
       if the establishment of that handler (see ssiiggaaccttiioonn(2)) requested it.

       The  normal  sequence  of events for using an alternate signal stack is
       the following:

       1. Allocate an area of memory to  be  used  for  the  alternate  signal
          stack.

       2. Use ssiiggaallttssttaacckk() to inform the system of the existence and location
          of the alternate signal stack.

       3. When establishing a signal handler using  ssiiggaaccttiioonn(2),  inform  the
          system  that  the signal handler should be executed on the alternate
          signal stack by specifying the SSAA__OONNSSTTAACCKK flag.

       The _s_s argument is used to specify a new alternate signal stack,  while
       the  _o_s_s  argument  is used to retrieve information about the currently
       established signal stack.  If we are interested in performing just  one
       of these tasks, then the other argument can be specified as NULL.  Each
       of these arguments is a structure of the following type:

           typedef struct {
               void  *ss_sp;     /* Base address of stack */
               int    ss_flags;  /* Flags */
               size_t ss_size;   /* Number of bytes in stack */
           } stack_t;

       To establish a new alternate signal stack, _s_s_._s_s___f_l_a_g_s is set to  zero,
       and  _s_s_._s_s___s_p  and  _s_s_._s_s___s_i_z_e specify the starting address and size of
       the stack.  The constant SSIIGGSSTTKKSSZZ is defined  to  be  large  enough  to
       cover  the  usual  size requirements for an alternate signal stack, and
       the constant MMIINNSSIIGGSSTTKKSSZZ defines the minimum size required to execute a
       signal handler.

       When  a  signal  handler  is invoked on the alternate stack, the kernel
       automatically aligns the  address  given  in  _s_s_._s_s___s_p  to  a  suitable
       address boundary for the underlying hardware architecture.

       To  disable  an  existing stack, specify _s_s_._s_s___f_l_a_g_s as SSSS__DDIISSAABBLLEE.  In
       this case, the remaining fields in _s_s are ignored.

       If _o_s_s is not NULL, then it is used to  return  information  about  the
       alternate signal stack which was in effect prior to the call to ssiiggaalltt‐‐
       ssttaacckk().  The _o_s_s_._s_s___s_p and  _o_s_s_._s_s___s_i_z_e  fields  return  the  starting
       address  and size of that stack.  The _o_s_s_._s_s___f_l_a_g_s may return either of
       the following values:

       SSSS__OONNSSTTAACCKK
              The process is  currently  executing  on  the  alternate  signal
              stack.   (Note  that  it is not possible to change the alternate
              signal stack if the process is currently executing on it.)

       SSSS__DDIISSAABBLLEE
              The alternate signal stack is currently disabled.

RREETTUURRNN VVAALLUUEE
       ssiiggaallttssttaacckk() returns 0 on success, or -1 on failure with _e_r_r_n_o set  to
       indicate the error.

EERRRROORRSS
       EEFFAAUULLTT Either  _s_s  or  _o_s_s is not NULL and points to an area outside of
              the process's address space.

       EEIINNVVAALL _s_s is not NULL and the _s_s___f_l_a_g_s field contains a  nonzero  value
              other than SSSS__DDIISSAABBLLEE.

       EENNOOMMEEMM The  specified size of the new alternate signal stack _s_s_._s_s___s_i_z_e
              was less than MMIINNSSTTKKSSZZ.

       EEPPEERRMM  An attempt was made to change the alternate signal  stack  while
              it  was  active  (i.e., the process was already executing on the
              current alternate signal stack).

AATTTTRRIIBBUUTTEESS
       For  an  explanation  of  the  terms  used   in   this   section,   see
       aattttrriibbuutteess(7).

       ┌──────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee     │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├──────────────┼───────────────┼─────────┤
       │ssiiggaallttssttaacckk() │ Thread safety │ MT-Safe │
       └──────────────┴───────────────┴─────────┘

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2009, SUSv2, SVr4.

NNOOTTEESS
       The  most  common  usage  of an alternate signal stack is to handle the
       SSIIGGSSEEGGVV signal that is generated if the space available for the  normal
       process  stack is exhausted: in this case, a signal handler for SSIIGGSSEEGGVV
       cannot be invoked on the process stack; if we wish  to  handle  it,  we
       must use an alternate signal stack.

       Establishing  an  alternate signal stack is useful if a process expects
       that it may exhaust its standard stack.  This may occur,  for  example,
       because  the stack grows so large that it encounters the upwardly grow‐
       ing heap, or it  reaches  a  limit  established  by  a  call  to  sseettrr‐‐
       lliimmiitt((RRLLIIMMIITT__SSTTAACCKK,,  &&rrlliimm)).   If  the standard stack is exhausted, the
       kernel sends the process a SSIIGGSSEEGGVV signal.  In these circumstances  the
       only way to catch this signal is on an alternate signal stack.

       On  most  hardware  architectures supported by Linux, stacks grow down‐
       ward.  ssiiggaallttssttaacckk() automatically takes account of  the  direction  of
       stack growth.

       Functions called from a signal handler executing on an alternate signal
       stack will also use the alternate signal stack.  (This also applies  to
       any  handlers  invoked for other signals while the process is executing
       on the alternate signal stack.)  Unlike the standard stack, the  system
       does  not  automatically  extend the alternate signal stack.  Exceeding
       the allocated size of the alternate signal stack will  lead  to  unpre‐
       dictable results.

       A  successful  call  to eexxeeccvvee(2) removes any existing alternate signal
       stack.  A child process created via ffoorrkk(2) inherits a copy of its par‐
       ent's alternate signal stack settings.

       ssiiggaallttssttaacckk()  supersedes the older ssiiggssttaacckk() call.  For backward com‐
       patibility, glibc  also  provides  ssiiggssttaacckk().   All  new  applications
       should be written using ssiiggaallttssttaacckk().

   HHiissttoorryy
       4.2BSD  had  a  ssiiggssttaacckk()  system  call.  It used a slightly different
       struct, and had the major disadvantage that the caller had to know  the
       direction of stack growth.

EEXXAAMMPPLLEE
       The following code segment demonstrates the use of ssiiggaallttssttaacckk():

           stack_t ss;

           ss.ss_sp = malloc(SIGSTKSZ);
           if (ss.ss_sp == NULL)
               /* Handle error */;
           ss.ss_size = SIGSTKSZ;
           ss.ss_flags = 0;
           if (sigaltstack(&ss, NULL) == -1)
               /* Handle error */;

SSEEEE AALLSSOO
       eexxeeccvvee(2),  sseettrrlliimmiitt(2),  ssiiggaaccttiioonn(2),  ssiigglloonnggjjmmpp(3),  ssiiggsseettjjmmpp(3),
       ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, information about reporting bugs, and the
       latest    version    of    this    page,    can     be     found     at
       http://www.kernel.org/doc/man-pages/.

Linux                             2015-07-23                    SIGALTSTACK(2)
SIGINTERRUPT(3)                                                                                             Linux Programmer's Manual                                                                                             SIGINTERRUPT(3)

NNAAMMEE
       siginterrupt - allow signals to interrupt system calls

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt ssiiggiinntteerrrruupptt((iinntt _s_i_g,, iinntt _f_l_a_g));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssiiggiinntteerrrruupptt():
           _BSD_SOURCE || _XOPEN_SOURCE >= 500 || _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
           || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L

DDEESSCCRRIIPPTTIIOONN
       The ssiiggiinntteerrrruupptt() function changes the restart behavior when a system call is interrupted by the signal _s_i_g.  If the _f_l_a_g argument is false (0), then system calls will be restarted if interrupted by the specified signal _s_i_g.  This is
       the default behavior in Linux.

       If the _f_l_a_g argument is true (1) and no data has been transferred, then a system call interrupted by the signal _s_i_g will return -1 and _e_r_r_n_o will be set to EEIINNTTRR.

       If the _f_l_a_g argument is true (1) and data transfer has started, then the system call will be interrupted and will return the actual amount of data transferred.

RREETTUURRNN VVAALLUUEE
       The ssiiggiinntteerrrruupptt() function returns 0 on success.  It returns -1 if the signal number _s_i_g is invalid, with _e_r_r_n_o set to indicate the cause of the error.

EERRRROORRSS
       EEIINNVVAALL The specified signal number is invalid.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌───────────────┬───────────────┬─────────────────────────┐
       │IInntteerrffaaccee      │ AAttttrriibbuuttee     │ VVaalluuee                   │
       ├───────────────┼───────────────┼─────────────────────────┤
       │ssiiggiinntteerrrruupptt() │ Thread safety │ MT-Unsafe const:sigintr │
       └───────────────┴───────────────┴─────────────────────────┘
CCOONNFFOORRMMIINNGG TTOO
       4.3BSD, POSIX.1-2001.  POSIX.1-2008 marks ssiiggiinntteerrrruupptt() as obsolete, recommending the use of ssiiggaaccttiioonn(2) with the SSAA__RREESSTTAARRTT flag instead.

SSEEEE AALLSSOO
       ssiiggnnaall(2)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

                                                                                                                    2015-03-02                                                                                                    SIGINTERRUPT(3)
