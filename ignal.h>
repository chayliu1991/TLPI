SIGSUSPEND(2)                                                                                               Linux Programmer's Manual                                                                                               SIGSUSPEND(2)

NNAAMMEE
       sigsuspend, rt_sigsuspend - wait for a signal

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt ssiiggssuussppeenndd((ccoonnsstt ssiiggsseett__tt **_m_a_s_k));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssiiggssuussppeenndd(): _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE

DDEESSCCRRIIPPTTIIOONN
       ssiiggssuussppeenndd() temporarily replaces the signal mask of the calling process with the mask given by _m_a_s_k and then suspends the process until delivery of a signal whose action is to invoke a signal handler or to terminate a process.

       If  the  signal  terminates  the process, then ssiiggssuussppeenndd() does not return.  If the signal is caught, then ssiiggssuussppeenndd() returns after the signal handler returns, and the signal mask is restored to the state before the call to ssiiggssuuss‐‐
       ppeenndd().

       It is not possible to block SSIIGGKKIILLLL or SSIIGGSSTTOOPP; specifying these signals in _m_a_s_k, has no effect on the process's signal mask.

RREETTUURRNN VVAALLUUEE
       ssiiggssuussppeenndd() always returns -1, with _e_r_r_n_o set to indicate the error (normally, EEIINNTTRR).

EERRRROORRSS
       EEFFAAUULLTT _m_a_s_k points to memory which is not a valid part of the process address space.

       EEIINNTTRR  The call was interrupted by a signal.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008.

NNOOTTEESS
       Normally, ssiiggssuussppeenndd() is used in conjunction with ssiiggpprrooccmmaasskk(2) in order to prevent delivery of a signal during the execution of a critical code section.  The caller first blocks the signals with ssiiggpprrooccmmaasskk(2).  When  the  critical
       code has completed, the caller then waits for the signals by calling ssiiggssuussppeenndd() with the signal mask that was returned by ssiiggpprrooccmmaasskk(2) (in the _o_l_d_s_e_t argument).

       See ssiiggsseettooppss(3) for details on manipulating signal sets.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The  original  Linux system call was named ssiiggssuussppeenndd().  However, with the addition of real-time signals in Linux 2.2, the fixed-size, 32-bit _s_i_g_s_e_t___t type supported by that system call was no longer fit for purpose.  Consequently, a
       new system call, rrtt__ssiiggssuussppeenndd(), was added to support an enlarged _s_i_g_s_e_t___t type.  The new system call takes a second argument, _s_i_z_e___t _s_i_g_s_e_t_s_i_z_e, which specifies the size in bytes of the signal set in _m_a_s_k.   This  argument  is  cur‐
       rently required to have the value _s_i_z_e_o_f_(_s_i_g_s_e_t___t_) (or the error EEIINNVVAALL results).  The glibc ssiiggssuussppeenndd() wrapper function hides these details from us, transparently calling rrtt__ssiiggssuussppeenndd() when the kernel provides it.

SSEEEE AALLSSOO
       kkiillll(2), ppaauussee(2), ssiiggaaccttiioonn(2), ssiiggnnaall(2), ssiiggpprrooccmmaasskk(2), ssiiggwwaaiittiinnffoo(2), ssiiggsseettooppss(3), ssiiggwwaaiitt(3), ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

Linux                                                                                                               2015-07-23                                                                                                      SIGSUSPEND(2)
