EPOLL_CTL(2)                                                                                                    Linux Programmer's Manual                                                                                                    EPOLL_CTL(2)

NNAAMMEE
       epoll_ctl - control interface for an epoll descriptor

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//eeppoollll..hh>>

       iinntt eeppoollll__ccttll((iinntt _e_p_f_d,, iinntt _o_p,, iinntt _f_d,, ssttrruucctt eeppoollll__eevveenntt **_e_v_e_n_t));;

DDEESSCCRRIIPPTTIIOONN
       This system call performs control operations on the eeppoollll(7) instance referred to by the file descriptor _e_p_f_d.  It requests that the operation _o_p be performed for the target file descriptor, _f_d.

       Valid values for the _o_p argument are:

       EEPPOOLLLL__CCTTLL__AADDDD
              Register the target file descriptor _f_d on the eeppoollll instance referred to by the file descriptor _e_p_f_d and associate the event _e_v_e_n_t with the internal file linked to _f_d.

       EEPPOOLLLL__CCTTLL__MMOODD
              Change the event _e_v_e_n_t associated with the target file descriptor _f_d.

       EEPPOOLLLL__CCTTLL__DDEELL
              Remove (deregister) the target file descriptor _f_d from the eeppoollll instance referred to by _e_p_f_d.  The _e_v_e_n_t is ignored and can be NULL (but see BUGS below).

       The _e_v_e_n_t argument describes the object linked to the file descriptor _f_d.  The _s_t_r_u_c_t _e_p_o_l_l___e_v_e_n_t is defined as:

           typedef union epoll_data {
               void        *ptr;
               int          fd;
               uint32_t     u32;
               uint64_t     u64;
           } epoll_data_t;

           struct epoll_event {
               uint32_t     events;      /* Epoll events */
               epoll_data_t data;        /* User data variable */
           };

       The _e_v_e_n_t_s member is a bit mask composed using the following available event types:

       EEPPOOLLLLIINN
              The associated file is available for rreeaadd(2) operations.

       EEPPOOLLLLOOUUTT
              The associated file is available for wwrriittee(2) operations.

       EEPPOOLLLLRRDDHHUUPP (since Linux 2.6.17)
              Stream socket peer closed connection, or shut down writing half of connection.  (This flag is especially useful for writing simple code to detect peer shutdown when using Edge Triggered monitoring.)

       EEPPOOLLLLPPRRII
              There is urgent data available for rreeaadd(2) operations.

       EEPPOOLLLLEERRRR
              Error condition happened on the associated file descriptor.  eeppoollll__wwaaiitt(2) will always wait for this event; it is not necessary to set it in _e_v_e_n_t_s.

       EEPPOOLLLLHHUUPP
              Hang  up  happened  on the associated file descriptor.  eeppoollll__wwaaiitt(2) will always wait for this event; it is not necessary to set it in _e_v_e_n_t_s.  Note that when reading from a channel such as a pipe or a stream socket, this event merely
              indicates that the peer closed its end of the channel.  Subsequent reads from the channel will return 0 (end of file) only after all outstanding data in the channel has been consumed.

       EEPPOOLLLLEETT
              Sets the Edge Triggered behavior for the associated file descriptor.  The default behavior for eeppoollll is Level Triggered.  See eeppoollll(7) for more detailed information about Edge and Level Triggered event distribution architectures.

       EEPPOOLLLLOONNEESSHHOOTT (since Linux 2.6.2)
              Sets the one-shot behavior for the associated file descriptor.  This means that after an event is pulled out with eeppoollll__wwaaiitt(2) the associated file descriptor is internally disabled and no other events will be  reported  by  the  eeppoollll
              interface.  The user must call eeppoollll__ccttll() with EEPPOOLLLL__CCTTLL__MMOODD to rearm the file descriptor with a new event mask.

       EEPPOOLLLLWWAAKKEEUUPP (since Linux 3.5)
              If  EEPPOOLLLLOONNEESSHHOOTT  and  EEPPOOLLLLEETT  are  clear and the process has the CCAAPP__BBLLOOCCKK__SSUUSSPPEENNDD capability, ensure that the system does not enter "suspend" or "hibernate" while this event is pending or being processed.  The event is considered as
              being "processed" from the time when it is returned by a call to eeppoollll__wwaaiitt(2) until the next call to eeppoollll__wwaaiitt(2) on the same eeppoollll(7) file descriptor, the closure of that file descriptor, the removal of  the  event  file  descriptor
              with EEPPOOLLLL__CCTTLL__DDEELL, or the clearing of EEPPOOLLLLWWAAKKEEUUPP for the event file descriptor with EEPPOOLLLL__CCTTLL__MMOODD.  See also BUGS.

RREETTUURRNN VVAALLUUEE
       When successful, eeppoollll__ccttll() returns zero.  When an error occurs, eeppoollll__ccttll() returns -1 and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEBBAADDFF  _e_p_f_d or _f_d is not a valid file descriptor.

       EEEEXXIISSTT _o_p was EEPPOOLLLL__CCTTLL__AADDDD, and the supplied file descriptor _f_d is already registered with this epoll instance.

       EEIINNVVAALL _e_p_f_d is not an eeppoollll file descriptor, or _f_d is the same as _e_p_f_d, or the requested operation _o_p is not supported by this interface.

       EENNOOEENNTT _o_p was EEPPOOLLLL__CCTTLL__MMOODD or EEPPOOLLLL__CCTTLL__DDEELL, and _f_d is not registered with this epoll instance.

       EENNOOMMEEMM There was insufficient memory to handle the requested _o_p control operation.

       EENNOOSSPPCC The limit imposed by _/_p_r_o_c_/_s_y_s_/_f_s_/_e_p_o_l_l_/_m_a_x___u_s_e_r___w_a_t_c_h_e_s was encountered while trying to register (EEPPOOLLLL__CCTTLL__AADDDD) a new file descriptor on an epoll instance.  See eeppoollll(7) for further details.

       EEPPEERRMM  The target file _f_d does not support eeppoollll.  This error can occur if _f_d refers to, for example, a regular file or a directory.

VVEERRSSIIOONNSS
       eeppoollll__ccttll() was added to the kernel in version 2.6.

CCOONNFFOORRMMIINNGG TTOO
       eeppoollll__ccttll() is Linux-specific.  Library support is provided in glibc starting with version 2.3.2.

NNOOTTEESS
       The eeppoollll interface supports all file descriptors that support ppoollll(2).

BBUUGGSS
       In  kernel  versions before 2.6.9, the EEPPOOLLLL__CCTTLL__DDEELL operation required a non-null pointer in _e_v_e_n_t, even though this argument is ignored.  Since Linux 2.6.9, _e_v_e_n_t can be specified as NULL when using EEPPOOLLLL__CCTTLL__DDEELL.  Applications that need to
       be portable to kernels before 2.6.9 should specify a non-null pointer in _e_v_e_n_t.

       If EEPPOOLLLLWWAAKKEEUUPP is specified in _f_l_a_g_s, but the caller does not have the CCAAPP__BBLLOOCCKK__SSUUSSPPEENNDD capability, then the EEPPOOLLLLWWAAKKEEUUPP flag is _s_i_l_e_n_t_l_y _i_g_n_o_r_e_d.  This unfortunate behavior is necessary because no validity checks were performed on the _f_l_a_g_s
       argument  in the original implementation, and the addition of the EEPPOOLLLLWWAAKKEEUUPP with a check that caused the call to fail if the caller did not have the CCAAPP__BBLLOOCCKK__SSUUSSPPEENNDD capability caused a breakage in at least one existing user-space applica‚Äê
       tion that happened to randomly (and uselessly) specify this bit.  A robust application should therefore double check that it has the CCAAPP__BBLLOOCCKK__SSUUSSPPEENNDD capability if attempting to use the EEPPOOLLLLWWAAKKEEUUPP flag.

SSEEEE AALLSSOO
       eeppoollll__ccrreeaattee(2), eeppoollll__wwaaiitt(2), ppoollll(2), eeppoollll(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

Linux                                                                                                                   2015-05-07                                                                                                           EPOLL_CTL(2)
